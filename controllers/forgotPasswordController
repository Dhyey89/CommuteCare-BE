const nodemailer = require('nodemailer');
const crypto = require('crypto');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const ResetToken = require('../models/resetTokenModel');
const User = require('../models/user');

exports.forgotPassword = async (req, res) => {
  const email = req.body.email;
  const user = await User.findOne({ email: email });

  // If user with email exists, generate a unique token and save it to the database
  if (user) {
    const token = crypto.randomBytes(20).toString('hex');
    const expirationTime = new Date();
    expirationTime.setHours(expirationTime.getHours() + 1);
    const resetToken = new ResetToken({ email: email, token: token, expiresAt: expirationTime });
    await resetToken.save();

    // Send an email to the user with a link to the password reset form
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: 'dhyeypatel108@gmail.com',
        pass: 'kjnkioqyitotosey'
      }
    });

    const mailOptions = {
      from: 'dhyeypatel108@gmail.com',
      to: email,
      subject: 'Password Reset Request',
      text: `Hello from Commute Care
      Please click on the following link to reset your password: http://localhost:5000/reset-password/${token}`
    };

    transporter.sendMail(mailOptions, (error, info) => {
      if (error) {
        console.log(error);
      } else {
        console.log('Email sent: ' + info.response);
      }
    });

    res.send('Email sent!');
  } else {
    res.status(404).send('User not found.');
  }
};

exports.resetPassword = async (req, res, next) => {
  let token = req.params.token;
  const newPassword = req.body.password;

  // Find the reset token in the database
  const resetToken = await ResetToken.findOne({ token: token, expiresAt: { $gt: new Date() } });

  if (!resetToken) {
    const error = new Error('Invalid or expired token.');
    error.statusCode = 400;
    throw error;
  }

  // Find the user associated with the reset token
  const user = await User.findOne({ email: resetToken.email });

  if (!user) {
    const error = new Error('User not found.');
    error.statusCode = 404;
    throw error;
  }

  // Update the user's password and delete the reset token
  const hashedPassword = await bcrypt.hash(newPassword, 12);
  user.password = hashedPassword;
  await user.save();
  await resetToken.deleteOne();

  // Generate a new access token for the user
   token = jwt.sign(
    {
      email: user.email,
      userId: user._id.toString()
    },
    'somesupersecretsecret',
    { expiresIn: '1h' }
  );

  res.status(200).json({ token: token, userId: user._id.toString() });
};

